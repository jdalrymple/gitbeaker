name: 'Base Pipeline'

on:
  pull_request:
    branches:
      - main

env:
  NODE_VERSION: 20
  GCP_ZONE: us-central1-c
  GCP_CONTAINER_NAME: gitlab-${{ github.run_id }}

jobs:
  warmup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
      - name: Install dependencies
        run: yarn install --immutable

  lint:
    runs-on: ubuntu-latest
    needs:
      - warmup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
      - name: Cache NX cache
        uses: actions/cache@v4
        with:
          path: .nx
          key: ${{ runner.os }}-nx-${{ hashFiles('yarn.lock') }}
          restore-keys: ${{ runner.os }}-nx-
      - name: Install dependencies
        run: yarn install --immutable
      - name: Lint
        run: yarn lint

  format:
    runs-on: ubuntu-latest
    needs:
      - warmup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
      - name: Cache NX cache
        uses: actions/cache@v4
        with:
          path: .nx
          key: ${{ runner.os }}-nx-${{ hashFiles('yarn.lock') }}
          restore-keys: ${{ runner.os }}-nx-
      - name: Install dependencies
        run: yarn install --immutable
      - name: Format
        run: yarn format

  build:
    runs-on: ubuntu-latest
    needs:
      - warmup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
      - name: Install dependencies
        run: yarn install --immutable
      - name: Cache NX cache
        uses: actions/cache@v4
        with:
          path: .nx
          key: ${{ runner.os }}-nx-${{ hashFiles('yarn.lock') }}
          restore-keys: ${{ runner.os }}-nx-
      - name: Build Packages
        run: yarn build
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: packages
          path: |
            packages/core/dist/
            packages/cli/dist/
            packages/rest/dist/
            packages/requester-utils/dist/

  test-unit:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs:
      - lint
      - format
    strategy:
      matrix:
        package-name: [requester-utils, core, rest, cli]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
      - name: Cache NX cache
        uses: actions/cache@v4
        with:
          path: .nx
          key: ${{ runner.os }}-nx-${{ hashFiles('yarn.lock') }}
          restore-keys: ${{ runner.os }}-nx-
      - name: Install dependencies
        run: yarn install --immutable
      - name: Test
        run: yarn test:unit --projects=@gitbeaker/${{ matrix.package-name }}
      - name: Upload Coverage
        uses: qltysh/qlty-action/coverage@v1
        with:
          token: ${{secrets.QLTY_COVERAGE_TOKEN}}
          files: ${{github.workspace}}/packages/${{ matrix.package-name }}/coverage/lcov.info

  test-types:
    name: Types Tests
    runs-on: ubuntu-latest
    needs:
      - lint
      - format
      - build
    strategy:
      matrix:
        package-name: [requester-utils, core, rest, cli]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
      - name: Cache NX cache
        uses: actions/cache@v4
        with:
          path: .nx/cache
          key: ${{ runner.os }}-nx-${{ hashFiles('yarn.lock') }}
          restore-keys: ${{ runner.os }}-nx-
      - name: Install dependencies
        run: yarn install --immutable
      - name: Test
        run: yarn test:types --projects=@gitbeaker/${{ matrix.package-name }}

  test-integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs:
      - lint
      - format
      - build
    strategy:
      matrix:
        package-name: [requester-utils, core, rest, cli]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
      - name: Cache NX cache
        uses: actions/cache@v4
        with:
          path: .nx
          key: ${{ runner.os }}-nx-${{ hashFiles('yarn.lock') }}
          restore-keys: ${{ runner.os }}-nx-
      - name: Install dependencies
        run: yarn install --immutable
      - name: Test
        run: yarn test:integration --projects=@gitbeaker/${{ matrix.package-name }}
# test:live:setup:
#   stage: setup
#   image: gcr.io/google.com/cloudsdktool/cloud-sdk:alpine
#   needs: []
#   timeout: 15m
#   rules:
#     - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
#       when: on_success
#       allow_failure: false
#     - if: $CI_COMMIT_BRANCH == "next" || $CI_COMMIT_BRANCH =~ /^pr-[0-9]+$/
#       when: manual
#       allow_failure: true
#   variables:
#     GITLAB_PERSONAL_ACCESS_TOKEN: gitbeaker
#     GITLAB_VERSION: 16.11.3-ce.0
#     GITLAB_ROOT_PASSWORD: gitbeaker
#   before_script:
#     - apk add jq curl envsubst
#     - gcloud components install beta -q
#   script:
#     - echo $GCLOUD_SERVICE_KEY | base64 -d | gcloud auth activate-service-account --key-file=-
#     - gcloud --quiet config set project ${GOOGLE_PROJECT_ID} --no-user-output-enabled
#     - envsubst < scripts/startup.sh > scripts/startup_filled.sh
#     - |
#       GITLAB_HOST="$(gcloud beta compute instances create $CONTAINER_NAME \
#         --project gitbeaker \
#         --machine-type=e2-highmem-2 \
#         --boot-disk-size=25GB \
#         --zone=$GCP_ZONE \
#         --tags http-server \
#         --metadata-from-file startup-script=scripts/startup_filled.sh \
#         --image-family=debian-12 \
#         --image-project=debian-cloud \
#         --format='get(networkInterfaces[0].accessConfigs[0].natIP)'
#         2>/dev/null \
#         )"
#     - GITLAB_URL="http://${GITLAB_HOST}"
#     - echo "GITLAB_URL=${GITLAB_URL}" >> intergration.env
#     - echo "GITLAB_PERSONAL_ACCESS_TOKEN=${GITLAB_PERSONAL_ACCESS_TOKEN}" >> intergration.env
#     - echo "Waiting for service to start"
#     - sleep 240
#     - attempt=1
#     - |
#       while [[ "$(curl --fail --silent -X GET "$GITLAB_URL/-/readiness?all=1" --insecure | jq -r '.master_check[0].status')" != "ok" ]]; do
#         echo "Polling Attempt: $attempt - Gitlab service is not alive yet";
#         sleep 10;
#         ((attempt++));
#       done
#     - echo "Service is up and running"
#   artifacts:
#     reports:
#       dotenv: intergration.env

# test:e2e:
#   runs-on: ubuntu-latest
#   needs:
#     -
#     - build
#   strategy:
#     matrix:
#       package-name: [requester-utils, core, rest, cli]
#   steps:
#     - name: Checkout code
#       uses: actions/checkout@v4
#     - name: Set up Node.js
#       uses: actions/setup-node@v4
#       with:
#         node-version: ${{ env.NODE_VERSION }}
#         cache: 'yarn'
#     - name: Cache NX cache
#       uses: actions/cache@v4
#       with:
#         path: .nx/cache
#         key: ${{ runner.os }}-nx-${{ hashFiles('yarn.lock') }}
#         restore-keys: ${{ runner.os }}-nx-
#     - name: Install dependencies
#       run: yarn install --immutable
#     - name: Test
#       run: yarn test:integration --projects=@gitbeaker/${{ matrix.package-name }}

# test:e2e:rest:
#   extends: .test:e2e:base
#   image: mcr.microsoft.com/playwright:v1.45.1-focal
#   allow_failure: true
#   before_script:
#     # reinstall swc due to missing binding for ubuntu image
#     - yarn add @swc/core
#   script: yarn test:e2e --projects=@gitbeaker/rest

# test:e2e:cli:
#   extends: .test:e2e:base
#   allow_failure: true
#   script: yarn test:e2e --projects=@gitbeaker/cli

# test:live:teardown:
#   stage: teardown
#   image: gcr.io/google.com/cloudsdktool/cloud-sdk:alpine
#   needs:
#     - test:e2e:rest
#     - test:e2e:cli
#   only:
#     refs:
#       - /^pr-[0-9]+$/
#       - main
#       - next
#   variables:
#     GIT_STRATEGY: none
#   script:
#     - echo $GCLOUD_SERVICE_KEY | base64 -d | gcloud auth activate-service-account --key-file=-
#     - gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
#     - gcloud compute instances delete $CONTAINER_NAME --zone=$GCP_ZONE
